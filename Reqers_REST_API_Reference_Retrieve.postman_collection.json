{
	"info": {
		"_postman_id": "b794499c-22dd-45be-a9fe-7657f79eee23",
		"name": "Reqers_REST_API_Reference_Retrieve",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27065087"
	},
	"item": [
		{
			"name": "New Request_Retrieve",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statuscode = pm.response.status;  \r",
							"var countstart = pm.collectionVariables.get(\"start\");\r",
							"var countend = pm.collectionVariables.get(\"End\");\r",
							"if(statuscode == \"created\")\r",
							"{\r",
							" pm.test(\"Status code is 201\",function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Step 2 : Genarate date function\r",
							"var actualdate = new Date().toISOString().slice(0,13);\r",
							"//Step 2.1 : Validate Response Body and Fetch data from the Request\r",
							"var requestBody = pm.request.body.raw;\r",
							"requestBody = JSON.parse(requestBody);\r",
							"var req_name = requestBody.name;\r",
							"var req_job = requestBody.job;\r",
							"var req_city = requestBody.city;\r",
							"var req_updatedAt = requestBody.updatedAt;\r",
							"//Step 2.2 : Extract Body Parameters\r",
							"var responseBody = pm.response.json();\r",
							"var res_name = responseBody.name;\r",
							"var res_job = responseBody.job;\r",
							"var res_city = responseBody.city;\r",
							"var res_updatedAt = responseBody.updatedAt;\r",
							"res_updatedAt = res_updatedAt.slice (0,13);\r",
							"//Step 2.3 : Validate Response Body\r",
							"pm.test(\"Validate Response Body Parameters Name\",function(){\r",
							"    pm.expect(res_name).to.eql(req_name); \r",
							"});\r",
							"pm.test(\"Validate Response Body Parameters Job\", function(){\r",
							"    pm.expect(res_job).to.eql(req_job);\r",
							"});\r",
							"pm.test(\"Validate Response Body Parameters City\", function(){\r",
							"    pm.expect(res_city).to.eql(req_city);\r",
							"});\r",
							"pm.test(\"Validate Response Body Parameters Date\",function(){\r",
							"    pm.expect(req_updatedAt).to.eql(req_updatedAt);\r",
							"});\r",
							"}\r",
							"else\r",
							"{\r",
							"    if(countstart<countend)\r",
							"    {\r",
							"        pm.collectionVariables.set(\"start\",eval(countstart+1));\r",
							"        console.log(pm.collectionVariables.get(\"start\"));\r",
							"        postman.setNextRequest(\"New Request_Retrieve\");\r",
							"    }\r",
							"    else\r",
							"    {\r",
							"        postman.setNextRequest(null);\r",
							"        pm.collectionVariables.set(\"start\",0);\r",
							"        pm.test(\"statuscode is 201\",function()\r",
							"        {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var name=pm.variables.replaceIn('{{$randomFirstName}}');\r",
							"pm.collectionVariables.set(\"Coll_Name\",name);\r",
							"\r",
							"var job=pm.variables.replaceIn('{{$randomJobTitle}}');\r",
							"pm.collectionVariables.set(\"Coll_Job\",job);\r",
							"\r",
							"var city = pm.variables.replaceIn('{{$randomCity}}');\r",
							"pm.collectionVariables.set(\"Coll_city\",city);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{Coll_Name}}\",\r\n    \"job\": \"{{Coll_Job}}\",\r\n    \"city\":\"{{Coll_city}}\"\r\n    \r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Put_URL}}",
					"host": [
						"{{Put_URL}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request_Retrieve",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statuscode = pm.response.status;  \r",
							"var countstart = pm.collectionVariables.get(\"start\");\r",
							"var countend = pm.collectionVariables.get(\"End\");\r",
							"if(statuscode == \"created\")\r",
							"{\r",
							" pm.test(\"Status code is 201\",function() {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"//Step 2: Validate Response Body\r",
							"// Step 2.1 : Generate Date in required Format\r",
							"var actualdate = new Date().toJSON().slice(0,13);\r",
							"//Step 2.1 : Validate Response Body and Fetch data from the Request\r",
							"var requestBody = pm.request.body.raw;\r",
							"requestBody = JSON.parse(requestBody);\r",
							"var req_name = requestBody.name;\r",
							"var req_job = requestBody.job;\r",
							"var req_id = requestBody.id;\r",
							"var req_createdAt = requestBody.createdAt;\r",
							"// Step 2.2 : Extract Response Body\r",
							"var responseBody = pm.response.json();\r",
							"var res_name = responseBody.name;\r",
							"var res_job = responseBody.job;\r",
							"var res_id = responseBody.id;\r",
							"var res_createdAt = responseBody.createdAt; \r",
							"res_createdAt = res_createdAt.slice(0,13);\r",
							"//Step 2.3 : Validate Response Body Different function each and every function\r",
							" pm.test(\"Validate Response Body Parameters Name\", function() {\r",
							"     pm.expect(res_name).to.eql(req_name);\r",
							" });\r",
							" pm.test(\"Validate Response Body Parameters job\",function(){\r",
							"\r",
							"     pm.expect(res_job).to.eql(req_job);\r",
							" });\r",
							"pm.test(\"Validate Response Body Parameters ID\",function(){\r",
							"     pm.expect(res_id).to.not.null;\r",
							"     pm.expect(res_id).to.not.eql(0);\r",
							"     pm.expect(res_id).to.eql(req_id);\r",
							"});\r",
							"pm.test(\"Validate Response Body Parameters Date\",function(){\r",
							"    pm.expect(res_createdAt).to.eql(res_createdAt);\r",
							"});\r",
							"}\r",
							"else\r",
							"{\r",
							"    if(countstart<countend)\r",
							"    {\r",
							"        pm.collectionVariables.set(\"start\",eval(countstart+1));\r",
							"        console.log(pm.collectionVariables.get(\"start\"));\r",
							"        postman.setNextRequest(\"New Request_Retrieve\");\r",
							"    }\r",
							"    else\r",
							"    {\r",
							"        postman.setNextRequest(null);\r",
							"        pm.collectionVariables.set(\"start\",0);\r",
							"        pm.test(\"statuscode is 201\",function()\r",
							"        {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"var name=pm.variables.replaceIn('{{$randomFirstName}}');\r",
							"pm.collectionVariables.set(\"Coll_Name\",name);\r",
							"\r",
							"var job=pm.variables.replaceIn('{{$randomJobTitle}}');\r",
							"pm.collectionVariables.set(\"Coll_Job\",job);\r",
							"\r",
							"var id = pm.variables.replaceIn('{{$randomInt}}');\r",
							"pm.collectionVariables.set(\"Coll_Id\",id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{Coll_Name}}\",\r\n    \"job\": \"{{Coll_Job}}\",\r\n    \"id\": \"{{Coll_Id}}\"\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Post_URL}}",
					"host": [
						"{{Post_URL}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request _Retrieve",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statuscode = pm.response.status;  \r",
							"var countstart = pm.collectionVariables.get(\"start\");\r",
							"var countend = pm.collectionVariables.get(\"End\");\r",
							"if(statuscode == \"Created\")\r",
							"{\r",
							"pm.test(\"Status code is 200\",function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Step 2.1 Fetch data from request\r",
							"var resquestBody = pm.request.body.raw;\r",
							"resquestBody = JSON.parse(resquestBody);\r",
							"var res_name = resquestBody.name;\r",
							"var res_job = resquestBody.job;\r",
							"var res_id = resquestBody.id;\r",
							"//var res_updatedAt = resquestBody.updatedAt;\r",
							"// Step 2.2 : Generate Date in required Format\r",
							"var actualdate = new Date().toJSON().slice(0,13);\r",
							"// Step 2.3 : Extract Response Body\r",
							"var responseBody = pm.response.json();\r",
							"var res_name = responseBody.name;\r",
							"var res_job = responseBody.job;\r",
							"var res_id = responseBody.id;\r",
							"var res_updatedAt = responseBody.updatedAt; \r",
							"res_updatedAt = res_updatedAt.slice(0,13);\r",
							"//Step 2.4 : Validate Response Body Different function each and every function\r",
							" pm.test(\"Validate Response Body Parameters Name\", function() {\r",
							"     pm.expect(res_name).to.eql(res_name);\r",
							" });\r",
							" pm.test(\"Validate Response Body Parameters job\",function(){\r",
							"     pm.expect(res_job).to.eql(res_job);\r",
							" });\r",
							"pm.test(\"Validate Response Body Parameters ID\",function(){\r",
							"     pm.expect(res_id).to.not.null;\r",
							"     pm.expect(res_id).to.not.eql(0);\r",
							"});\r",
							"pm.test(\"Validate Response Body Parameters Date\",function(){\r",
							"    pm.expect(res_updatedAt).to.eql(actualdate);\r",
							"});\r",
							"}\r",
							"else\r",
							"{\r",
							"    if(countstart<countend)\r",
							"    {\r",
							"        pm.collectionVariables.set(\"start\",eval(countstart+1));\r",
							"        console.log(pm.collectionVariables.get(\"start\"));\r",
							"        postman.setNextRequest(\"New Request_Retrieve\");\r",
							"    }\r",
							"    else\r",
							"    {\r",
							"        postman.setNextRequest(null);\r",
							"        pm.collectionVariables.set(\"start\",0);\r",
							"        pm.test(\"statuscode is 200\",function()\r",
							"        {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var name=pm.variables.replaceIn('{{$randomFirstName}}');\r",
							"pm.collectionVariables.set(\"Coll_Name\",name);\r",
							"\r",
							"var job=pm.variables.replaceIn('{{$randomJobTitle}}');\r",
							"pm.collectionVariables.set(\"Coll_Job\",job);\r",
							"\r",
							"var id = pm.variables.replaceIn('{{$randomInt}}');\r",
							"pm.collectionVariables.set(\"Coll_Id\",id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{Coll_Name}}\",\r\n    \"job\": \"{{Coll_Job}}\",\r\n    \"id\": \"{{Coll_Id}}\"\r\n}\r\n\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Patch_URL}}",
					"host": [
						"{{Patch_URL}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Coll_Name",
			"value": ""
		},
		{
			"key": "Coll_Job",
			"value": ""
		},
		{
			"key": "Coll_Id",
			"value": ""
		},
		{
			"key": "start",
			"value": "0",
			"type": "string"
		},
		{
			"key": "End",
			"value": "5",
			"type": "string"
		},
		{
			"key": "email",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "password",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "Coll_city",
			"value": ""
		}
	]
}